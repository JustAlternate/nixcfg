# Auto-generated using compose2nix v0.3.1.
{
  pkgs,
  lib,
  ...
}:
{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."open-webui-openwebui" = {
    image = "ghcr.io/open-webui/open-webui:0.5.9";
    volumes = [
      "open-webui_open-webui:/app/backend/data:rw"
    ];
    ports = [
      "3040:8080/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=openwebui"
      "--network=open-webui_default"
    ];
  };
  systemd.services."docker-open-webui-openwebui" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-open-webui_default.service"
      "docker-volume-open-webui_open-webui.service"
    ];
    requires = [
      "docker-network-open-webui_default.service"
      "docker-volume-open-webui_open-webui.service"
    ];
    partOf = [
      "docker-compose-open-webui-root.target"
    ];
    wantedBy = [
      "docker-compose-open-webui-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-open-webui_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f open-webui_default";
    };
    script = ''
      docker network inspect open-webui_default || docker network create open-webui_default
    '';
    partOf = [ "docker-compose-open-webui-root.target" ];
    wantedBy = [ "docker-compose-open-webui-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-open-webui_open-webui" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect open-webui_open-webui || docker volume create open-webui_open-webui
    '';
    partOf = [ "docker-compose-open-webui-root.target" ];
    wantedBy = [ "docker-compose-open-webui-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-open-webui-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
