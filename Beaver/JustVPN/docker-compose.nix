# Auto-generated using compose2nix v0.3.1.
{
  pkgs,
  lib,
  config,
  ...
}:

let
  PASSWORD = builtins.readFile config.sops.secrets."PASSWORD".path;
in

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."justvpn" = {
    image = "justvpn:1.15";
    environment = {
      "SSH_PASSWORD" = PASSWORD;
      "JWT_TOKEN" = PASSWORD;
    };
    ports = [
      "3030:8081/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=justvpn"
      "--network=justvpn_default"
    ];
  };
  systemd.services."docker-justvpn" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-justvpn_default.service"
    ];
    requires = [
      "docker-network-justvpn_default.service"
    ];
    partOf = [
      "docker-compose-justvpn-root.target"
    ];
    wantedBy = [
      "docker-compose-justvpn-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-justvpn_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f justvpn_default";
    };
    script = ''
      docker network inspect justvpn_default || docker network create justvpn_default
    '';
    partOf = [ "docker-compose-justvpn-root.target" ];
    wantedBy = [ "docker-compose-justvpn-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-justvpn-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
