# Auto-generated using compose2nix v0.2.3-pre.
{ pkgs, lib, ... }:
{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."hauk" = {
    image = "bilde2910/hauk";
    volumes = [ "/root/nixcfg/Beaver/hauk:/etc/hauk:rw" ];
    ports = [ "1212:80/tcp" ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=hauk"
      "--network=hauk_default"
    ];
  };
  systemd.services."docker-hauk" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [ "docker-network-hauk_default.service" ];
    requires = [ "docker-network-hauk_default.service" ];
    partOf = [ "docker-compose-hauk-root.target" ];
    wantedBy = [ "docker-compose-hauk-root.target" ];
  };

  # Networks
  systemd.services."docker-network-hauk_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f hauk_default";
    };
    script = ''
      docker network inspect hauk_default || docker network create hauk_default
    '';
    partOf = [ "docker-compose-hauk-root.target" ];
    wantedBy = [ "docker-compose-hauk-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-hauk-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
